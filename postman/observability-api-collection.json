{
  "info": {
    "_postman_id": "f8a4b523-e68c-4851-a2fa-32a5b3d0f1ab",
    "name": "Express Observability API",
    "description": "A collection for testing the Express Observability API with its various endpoints and features.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health and System",
      "item": [
        {
          "name": "Welcome",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has welcome message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Welcome');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Get welcome message from the API root endpoint"
          },
          "response": []
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has UP status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('UP');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Get health status of the API"
          },
          "response": []
        },
        {
          "name": "Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains metrics data\", function () {",
                  "    pm.expect(pm.response.text()).to.include('http_requests_total');",
                  "    pm.expect(pm.response.text()).to.include('http_response_time_seconds');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            },
            "description": "Get Prometheus metrics from the API"
          },
          "response": []
        },
        {
          "name": "Non-existent Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/non-existent-route",
              "host": ["{{baseUrl}}"],
              "path": ["non-existent-route"]
            },
            "description": "Test 404 error handling with a non-existent route"
          },
          "response": []
        }
      ],
      "description": "Tests for system health, metrics, and error handling endpoints."
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().length > 0) {",
                  "    pm.test(\"User objects have the correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Get all users from the API"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User has the correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.id).to.eql(Number(pm.iterationData.get(\"userId\")) || 1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            },
            "description": "Get a specific user by ID"
          },
          "response": []
        },
        {
          "name": "Get Non-existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/999",
              "host": ["{{baseUrl}}"],
              "path": ["users", "999"]
            },
            "description": "Attempt to get a user that doesn't exist"
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has the created user with correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.eql(pm.iterationData.get(\"newUserName\") || \"Test User\");",
                  "});",
                  "",
                  "// Store the created user ID for use in other requests",
                  "pm.collectionVariables.set(\"createdUserId\", pm.response.json().id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{newUserName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Create a new user"
          },
          "response": []
        },
        {
          "name": "Create User Without Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has error message about name requirement\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"something\": \"else\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Attempt to create a user without providing a name"
          },
          "response": []
        },
        {
          "name": "Get Created User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User has the correct structure and data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.id).to.eql(Number(pm.collectionVariables.get(\"createdUserId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{createdUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{createdUserId}}"]
            },
            "description": "Get the user created in a previous request"
          },
          "response": []
        }
      ],
      "description": "Tests for user management endpoints: creating, retrieving, and error handling."
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Error Test Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This endpoint can return either 200 or error",
                  "pm.test(\"Status code is either 200 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Successful response has message about delay\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.include('Delayed');",
                  "    });",
                  "} else if (pm.response.code === 500) {",
                  "    pm.test(\"Error response has error details\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/error/test",
              "host": ["{{baseUrl}}"],
              "path": ["users", "error", "test"]
            },
            "description": "Test the error simulation endpoint"
          },
          "response": []
        }
      ],
      "description": "Tests for the error handling capabilities of the API."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default values if not provided in data file",
          "if (!pm.iterationData.get(\"newUserName\")) {",
          "    pm.variables.set(\"newUserName\", \"Test User \" + Date.now().toString().slice(-5));",
          "}",
          "",
          "if (!pm.iterationData.get(\"userId\")) {",
          "    pm.variables.set(\"userId\", \"1\");",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common tests for all requests",
          "pm.test(\"Response time is acceptable\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test(\"Content-Type header is present\", function () {",
          "    pm.response.to.have.header(\"Content-Type\");",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "createdUserId",
      "value": ""
    }
  ]
}
